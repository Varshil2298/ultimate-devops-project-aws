{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/evaluation/use-feature-flag.ts", "../../src/internal/context.ts", "../../src/internal/is-equal.ts", "../../src/internal/options.ts", "../../src/internal/suspense.ts", "../../src/internal/use.ts", "../../src/provider/use-open-feature-client.ts", "../../src/internal/errors.ts", "../../src/provider/use-open-feature-client-status.ts", "../../src/provider/use-open-feature-provider.ts", "../../src/internal/hook-flag-query.ts", "../../src/provider/provider.tsx", "../../src/provider/use-when-provider-ready.ts", "../../src/provider/test-provider.tsx", "../../src/context/use-context-mutator.ts", "../../src/tracking/use-track.ts"],
  "sourcesContent": ["export * from './evaluation';\nexport * from './query';\nexport * from './provider';\nexport * from './context';\nexport * from './tracking';\nexport * from './options';\n// re-export the web-sdk so consumers can access that API from the react-sdk\nexport * from '@openfeature/web-sdk';\n", "import type {\n  Client,\n  ClientProviderEvents,\n  EvaluationDetails,\n  EventHandler,\n  FlagEvaluationOptions,\n  FlagValue,\n  JsonValue,\n} from '@openfeature/web-sdk';\nimport { ProviderEvents, ProviderStatus } from '@openfeature/web-sdk';\nimport { useEffect, useRef, useState } from 'react';\nimport {\n  DEFAULT_OPTIONS,\n  isEqual,\n  normalizeOptions,\n  suspendUntilInitialized,\n  suspendUntilReconciled,\n  useProviderOptions,\n} from '../internal';\nimport type { ReactFlagEvaluationNoSuspenseOptions, ReactFlagEvaluationOptions } from '../options';\nimport { useOpenFeatureClient } from '../provider/use-open-feature-client';\nimport { useOpenFeatureClientStatus } from '../provider/use-open-feature-client-status';\nimport { useOpenFeatureProvider } from '../provider/use-open-feature-provider';\nimport type { FlagQuery } from '../query';\nimport { HookFlagQuery } from '../internal/hook-flag-query';\n\n// This type is a bit wild-looking, but I think we need it.\n// We have to use the conditional, because otherwise useFlag('key', false) would return false, not boolean (too constrained).\n// We have a duplicate for the hook return below, this one is just used for casting because the name isn't as clear\ntype ConstrainedFlagQuery<T> = FlagQuery<\n  T extends boolean\n    ? boolean\n    : T extends number\n      ? number\n      : T extends string\n        ? string\n        : T extends JsonValue\n          ? T\n          : JsonValue\n>;\n\n/**\n * Evaluates a feature flag generically, returning an react-flavored queryable object.\n * The resolver method to use is based on the type of the defaultValue.\n * For type-specific hooks, use {@link useBooleanFlagValue}, {@link useBooleanFlagDetails} and equivalents.\n * By default, components will re-render when the flag value changes.\n * @param {string} flagKey the flag identifier\n * @template {FlagValue} T A optional generic argument constraining the default.\n * @param {T} defaultValue the default value; used to determine what resolved type should be used.\n * @param {ReactFlagEvaluationOptions} options for this evaluation\n * @returns { FlagQuery } a queryable object containing useful information about the flag.\n */\nexport function useFlag<T extends FlagValue = FlagValue>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): FlagQuery<\n  T extends boolean\n    ? boolean\n    : T extends number\n      ? number\n      : T extends string\n        ? string\n        : T extends JsonValue\n          ? T\n          : JsonValue\n> {\n  // use the default value to determine the resolver to call\n  const query =\n    typeof defaultValue === 'boolean'\n      ? new HookFlagQuery<boolean>(useBooleanFlagDetails(flagKey, defaultValue, options))\n      : typeof defaultValue === 'number'\n        ? new HookFlagQuery<number>(useNumberFlagDetails(flagKey, defaultValue, options))\n        : typeof defaultValue === 'string'\n          ? new HookFlagQuery<string>(useStringFlagDetails(flagKey, defaultValue, options))\n          : new HookFlagQuery<JsonValue>(useObjectFlagDetails(flagKey, defaultValue, options));\n  // TS sees this as HookFlagQuery<JsonValue>, because the compiler isn't aware of the `typeof` checks above.\n  return query as unknown as ConstrainedFlagQuery<T>;\n}\n\n// alias to the return value of useFlag, used to keep useSuspenseFlag consistent\ntype UseFlagReturn<T extends FlagValue> = ReturnType<typeof useFlag<T>>;\n\n/**\n * Equivalent to {@link useFlag} with `options: { suspend: true }`\n * @experimental Suspense is an experimental feature subject to change in future versions.\n * @param {string} flagKey the flag identifier\n * @template {FlagValue} T A optional generic argument constraining the default.\n * @param {T} defaultValue the default value; used to determine what resolved type should be used.\n * @param {ReactFlagEvaluationNoSuspenseOptions} options for this evaluation\n * @returns { UseFlagReturn<T> } a queryable object containing useful information about the flag.\n */\nexport function useSuspenseFlag<T extends FlagValue = FlagValue>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationNoSuspenseOptions,\n): UseFlagReturn<T> {\n  return useFlag(flagKey, defaultValue, { ...options, suspendUntilReady: true, suspendWhileReconciling: true });\n}\n\n/**\n * Evaluates a feature flag, returning a boolean.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @param {boolean} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { boolean} a EvaluationDetails object for this evaluation\n */\nexport function useBooleanFlagValue(\n  flagKey: string,\n  defaultValue: boolean,\n  options?: ReactFlagEvaluationOptions,\n): boolean {\n  return useBooleanFlagDetails(flagKey, defaultValue, options).value;\n}\n\n/**\n * Evaluates a feature flag, returning evaluation details.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @param {boolean} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { EvaluationDetails<boolean>} a EvaluationDetails object for this evaluation\n */\nexport function useBooleanFlagDetails(\n  flagKey: string,\n  defaultValue: boolean,\n  options?: ReactFlagEvaluationOptions,\n): EvaluationDetails<boolean> {\n  return attachHandlersAndResolve(\n    flagKey,\n    defaultValue,\n    (client) => {\n      return client.getBooleanDetails;\n    },\n    options,\n  );\n}\n\n/**\n * Evaluates a feature flag, returning a string.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @template {string} [T=string] A optional generic argument constraining the string\n * @param {T} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { boolean} a EvaluationDetails object for this evaluation\n */\nexport function useStringFlagValue<T extends string = string>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): string {\n  return useStringFlagDetails(flagKey, defaultValue, options).value;\n}\n\n/**\n * Evaluates a feature flag, returning evaluation details.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @template {string} [T=string] A optional generic argument constraining the string\n * @param {T} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { EvaluationDetails<string>} a EvaluationDetails object for this evaluation\n */\nexport function useStringFlagDetails<T extends string = string>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): EvaluationDetails<string> {\n  return attachHandlersAndResolve(\n    flagKey,\n    defaultValue,\n    (client) => {\n      return client.getStringDetails<T>;\n    },\n    options,\n  );\n}\n\n/**\n * Evaluates a feature flag, returning a number.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @template {number} [T=number] A optional generic argument constraining the number\n * @param {T} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { boolean} a EvaluationDetails object for this evaluation\n */\nexport function useNumberFlagValue<T extends number = number>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): number {\n  return useNumberFlagDetails(flagKey, defaultValue, options).value;\n}\n\n/**\n * Evaluates a feature flag, returning evaluation details.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @template {number} [T=number] A optional generic argument constraining the number\n * @param {T} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { EvaluationDetails<number>} a EvaluationDetails object for this evaluation\n */\nexport function useNumberFlagDetails<T extends number = number>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): EvaluationDetails<number> {\n  return attachHandlersAndResolve(\n    flagKey,\n    defaultValue,\n    (client) => {\n      return client.getNumberDetails<T>;\n    },\n    options,\n  );\n}\n\n/**\n * Evaluates a feature flag, returning an object.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @template {JsonValue} [T=JsonValue] A optional generic argument describing the structure\n * @param {T} defaultValue the default value\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { boolean} a EvaluationDetails object for this evaluation\n */\nexport function useObjectFlagValue<T extends JsonValue = JsonValue>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): T {\n  return useObjectFlagDetails<T>(flagKey, defaultValue, options).value;\n}\n\n/**\n * Evaluates a feature flag, returning evaluation details.\n * By default, components will re-render when the flag value changes.\n * For a generic hook returning a queryable interface, see {@link useFlag}.\n * @param {string} flagKey the flag identifier\n * @param {T} defaultValue the default value\n * @template {JsonValue} [T=JsonValue] A optional generic argument describing the structure\n * @param {ReactFlagEvaluationOptions} options options for this evaluation\n * @returns { EvaluationDetails<T>} a EvaluationDetails object for this evaluation\n */\nexport function useObjectFlagDetails<T extends JsonValue = JsonValue>(\n  flagKey: string,\n  defaultValue: T,\n  options?: ReactFlagEvaluationOptions,\n): EvaluationDetails<T> {\n  return attachHandlersAndResolve(\n    flagKey,\n    defaultValue,\n    (client) => {\n      return client.getObjectDetails<T>;\n    },\n    options,\n  );\n}\n\n// determines if a flag should be re-evaluated based on a list of changed flags\nfunction shouldEvaluateFlag(flagKey: string, flagsChanged?: string[]): boolean {\n  // if flagsChange is missing entirely, we don't know what to re-render\n  return !flagsChanged || flagsChanged.includes(flagKey);\n}\n\nfunction attachHandlersAndResolve<T extends FlagValue>(\n  flagKey: string,\n  defaultValue: T,\n  resolver: (\n    client: Client,\n  ) => (flagKey: string, defaultValue: T, options?: FlagEvaluationOptions) => EvaluationDetails<T>,\n  options?: ReactFlagEvaluationOptions,\n): EvaluationDetails<T> {\n  // highest priority > evaluation hook options > provider options > default options > lowest priority\n  const defaultedOptions = { ...DEFAULT_OPTIONS, ...useProviderOptions(), ...normalizeOptions(options) };\n  const client = useOpenFeatureClient();\n  const status = useOpenFeatureClientStatus();\n  const provider = useOpenFeatureProvider();\n\n  const controller = new AbortController();\n\n  if (defaultedOptions.suspendUntilReady && status === ProviderStatus.NOT_READY) {\n    suspendUntilInitialized(provider, client);\n  }\n\n  if (defaultedOptions.suspendWhileReconciling && status === ProviderStatus.RECONCILING) {\n    suspendUntilReconciled(client);\n  }\n\n  const [evaluationDetails, setEvaluationDetails] = useState<EvaluationDetails<T>>(\n    resolver(client).call(client, flagKey, defaultValue, options),\n  );\n\n  // Maintain a mutable reference to the evaluation details to have a up-to-date reference in the handlers.\n  const evaluationDetailsRef = useRef<EvaluationDetails<T>>(evaluationDetails);\n  useEffect(() => {\n    evaluationDetailsRef.current = evaluationDetails;\n  }, [evaluationDetails]);\n\n  const updateEvaluationDetailsCallback = () => {\n    const updatedEvaluationDetails = resolver(client).call(client, flagKey, defaultValue, options);\n\n    /**\n     * Avoid re-rendering if the value hasn't changed. We could expose a means\n     * to define a custom comparison function if users require a more\n     * sophisticated comparison in the future.\n     */\n    if (!isEqual(updatedEvaluationDetails.value, evaluationDetailsRef.current.value)) {\n      setEvaluationDetails(updatedEvaluationDetails);\n    }\n  };\n\n  const configurationChangeCallback: EventHandler<ClientProviderEvents.ConfigurationChanged> = (eventDetails) => {\n    if (shouldEvaluateFlag(flagKey, eventDetails?.flagsChanged)) {\n      updateEvaluationDetailsCallback();\n    }\n  };\n\n  useEffect(() => {\n    if (status === ProviderStatus.NOT_READY) {\n      // update when the provider is ready\n      client.addHandler(ProviderEvents.Ready, updateEvaluationDetailsCallback, { signal: controller.signal });\n    }\n\n    if (defaultedOptions.updateOnContextChanged) {\n      // update when the context changes\n      client.addHandler(ProviderEvents.ContextChanged, updateEvaluationDetailsCallback, { signal: controller.signal });\n    }\n\n    if (defaultedOptions.updateOnConfigurationChanged) {\n      // update when the provider configuration changes\n      client.addHandler(ProviderEvents.ConfigurationChanged, configurationChangeCallback, {\n        signal: controller.signal,\n      });\n    }\n    return () => {\n      // cleanup the handlers\n      controller.abort();\n    };\n  }, []);\n\n  return evaluationDetails;\n}\n", "import type { Client } from '@openfeature/web-sdk';\nimport React from 'react';\nimport type { NormalizedOptions, ReactFlagEvaluationOptions } from '../options';\nimport { normalizeOptions } from '.';\n\n/**\n * The underlying React context.\n *\n * **DO NOT EXPORT PUBLICLY**\n * @internal\n */\nexport const Context = React.createContext<\n  { client: Client; domain?: string; options: ReactFlagEvaluationOptions } | undefined\n>(undefined);\n\n/**\n * Get a normalized copy of the options used for this OpenFeatureProvider, see {@link normalizeOptions}.\n *\n * **DO NOT EXPORT PUBLICLY**\n * @internal\n * @returns {NormalizedOptions} normalized options the defaulted options, not defaulted or normalized.\n */\nexport function useProviderOptions(): NormalizedOptions {\n  const { options } = React.useContext(Context) || {};\n  return normalizeOptions(options);\n}\n", "import { type FlagValue } from '@openfeature/web-sdk';\n\n/**\n * Deeply compare two values to determine if they are equal.\n * Supports primitives and serializable objects.\n * @param {FlagValue} value First value to compare\n * @param {FlagValue} other Second value to compare\n * @returns {boolean} True if the values are equal\n */\nexport function isEqual(value: FlagValue, other: FlagValue): boolean {\n  if (value === other) {\n    return true;\n  }\n\n  if (typeof value !== typeof other) {\n    return false;\n  }\n\n  if (typeof value === 'object' && value !== null && other !== null) {\n    const valueKeys = Object.keys(value);\n    const otherKeys = Object.keys(other);\n\n    if (valueKeys.length !== otherKeys.length) {\n      return false;\n    }\n\n    for (const key of valueKeys) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (!isEqual((value as any)[key], (other as any)[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n", "import type { ReactFlagEvaluationOptions, NormalizedOptions } from '../options';\n\n/**\n * Default options.\n * DO NOT EXPORT PUBLICLY\n * @internal\n */\nexport const DEFAULT_OPTIONS: ReactFlagEvaluationOptions = {\n  updateOnContextChanged: true,\n  updateOnConfigurationChanged: true,\n  suspendUntilReady: false,\n  suspendWhileReconciling: false,\n};\n\n/**\n * Returns normalization options (all `undefined` fields removed, and `suspend` decomposed to `suspendUntilReady` and `suspendWhileReconciling`).\n * DO NOT EXPORT PUBLICLY\n * @internal\n * @param {ReactFlagEvaluationOptions} options  options to normalize\n * @returns {NormalizedOptions} normalized options\n */\nexport const normalizeOptions: (options?: ReactFlagEvaluationOptions) => NormalizedOptions = (\n  options: ReactFlagEvaluationOptions = {},\n) => {\n  const updateOnContextChanged = options.updateOnContextChanged;\n  const updateOnConfigurationChanged = options.updateOnConfigurationChanged;\n\n  // fall-back the suspense options to the catch-all `suspend` property\n  const suspendUntilReady = 'suspendUntilReady' in options ? options.suspendUntilReady : options.suspend;\n  const suspendWhileReconciling =\n    'suspendWhileReconciling' in options ? options.suspendWhileReconciling : options.suspend;\n\n  return {\n    // only return these if properly set (no undefined to allow overriding with spread)\n    ...(typeof suspendUntilReady === 'boolean' && { suspendUntilReady }),\n    ...(typeof suspendWhileReconciling === 'boolean' && { suspendWhileReconciling }),\n    ...(typeof updateOnContextChanged === 'boolean' && { updateOnContextChanged }),\n    ...(typeof updateOnConfigurationChanged === 'boolean' && { updateOnConfigurationChanged }),\n  };\n};\n", "import type { Client, Provider } from '@openfeature/web-sdk';\nimport { NOOP_PROVIDER, ProviderEvents } from '@openfeature/web-sdk';\nimport { use } from './use';\n\n/**\n * A weak map is used to store the global suspense status for each provider. It's\n * important for this to be global to avoid rerender loops. Using useRef won't\n * work because the value isn't preserved when a promise is thrown in a component,\n * which is how suspense operates.\n */\nconst globalProviderSuspenseStatus = new WeakMap<Provider, Promise<unknown>>();\n\n/**\n * Suspends until the client is ready to evaluate feature flags.\n *\n * **DO NOT EXPORT PUBLICLY**\n * @internal\n * @param {Provider} provider the provider to suspend for\n * @param {Client} client the client to check for readiness\n */\nexport function suspendUntilInitialized(provider: Provider, client: Client) {\n  const statusPromiseRef = globalProviderSuspenseStatus.get(provider);\n  if (!statusPromiseRef) {\n    // Noop provider is never ready, so we resolve immediately\n    const statusPromise = provider !== NOOP_PROVIDER ? isProviderReady(client) : Promise.resolve();\n    globalProviderSuspenseStatus.set(provider, statusPromise);\n    // Use will throw the promise and React will trigger a rerender when it's resolved\n    use(statusPromise);\n  } else {\n    // Reuse the existing promise, use won't rethrow if the promise has settled.\n    use(statusPromiseRef);\n  }\n}\n\n/**\n * Suspends until the provider has finished reconciling.\n *\n * **DO NOT EXPORT PUBLICLY**\n * @internal\n * @param {Client} client the client to check for readiness\n */\nexport function suspendUntilReconciled(client: Client) {\n  use(isProviderReady(client));\n}\n\nasync function isProviderReady(client: Client) {\n  const controller = new AbortController();\n  try {\n    return await new Promise((resolve, reject) => {\n      client.addHandler(ProviderEvents.Ready, resolve, { signal: controller.signal });\n      client.addHandler(ProviderEvents.Error, reject, { signal: controller.signal });\n    });\n  } finally {\n    controller.abort();\n  }\n}\n", "/// <reference types=\"react/experimental\" />\n// This function is adopted from https://github.com/vercel/swr\nimport React from 'react';\n\n/**\n * Extends a Promise-like value to include status tracking.\n * The extra properties are used to manage the lifecycle of the Promise, indicating its current state.\n * More information can be found in the React RFE for the use hook.\n * @see https://github.com/reactjs/rfcs/pull/229\n */\nexport type UsePromise<T> =\n  Promise<T> & {\n    status?: 'pending' | 'fulfilled' | 'rejected';\n    value?: T;\n    reason?: unknown;\n  };\n\n/**\n * React.use is a React API that lets you read the value of a resource like a Promise or context.\n * It was officially added in React 19, so needs to be polyfilled to support older React versions.\n * @param {UsePromise} thenable A thenable object that represents a Promise-like value.\n * @returns {unknown} The resolved value of the thenable or throws if it's still pending or rejected.\n */\nexport const use =\n  React.use ||\n  // This extra generic is to avoid TypeScript mixing up the generic and JSX syntax\n  // and emitting an error.\n  // We assume that this is only for the `use(thenable)` case, not `use(context)`.\n  // https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  (<T, _>(thenable: UsePromise<T>): T => {\n    switch (thenable.status) {\n      case 'pending':\n        throw thenable;\n      case 'fulfilled':\n        return thenable.value as T;\n      case 'rejected':\n        throw thenable.reason;\n      default:\n        thenable.status = 'pending';\n        thenable.then(\n          (v) => {\n            thenable.status = 'fulfilled';\n            thenable.value = v;\n          },\n          (e) => {\n            thenable.status = 'rejected';\n            thenable.reason = e;\n          },\n        );\n        throw thenable;\n    }\n  });\n", "import React from 'react';\nimport { Context } from '../internal';\nimport { type Client } from '@openfeature/web-sdk';\nimport { MissingContextError } from '../internal/errors';\n\n/**\n * Get the {@link Client} instance for this OpenFeatureProvider context.\n * Note that the provider to which this is bound is determined by the OpenFeatureProvider's domain.\n * @returns {Client} client for this scope\n */\nexport function useOpenFeatureClient(): Client {\n  const { client } = React.useContext(Context) || {};\n\n  if (!client) {\n    throw new MissingContextError('No OpenFeature client available');\n  }\n\n  return client;\n}\n", "const context = 'Components using OpenFeature must be wrapped with an <OpenFeatureProvider>.';\nconst tip = 'If you are seeing this in a test, see: https://openfeature.dev/docs/reference/technologies/client/web/react#testing';\n\nexport class MissingContextError extends Error {\n  constructor(reason: string) {\n    super(`${reason}: ${context} ${tip}`);\n    this.name = 'MissingContextError';\n  }\n}", "import { useEffect, useState } from 'react';\nimport { useOpenFeatureClient } from './use-open-feature-client';\nimport type { ProviderStatus } from '@openfeature/web-sdk';\nimport { ProviderEvents } from '@openfeature/web-sdk';\n\n/**\n * Get the {@link ProviderStatus} for the OpenFeatureClient.\n * @returns {ProviderStatus} status of the client for this scope\n */\nexport function useOpenFeatureClientStatus(): ProviderStatus {\n  const client = useOpenFeatureClient();\n  const [status, setStatus] = useState<ProviderStatus>(client.providerStatus);\n  const controller = new AbortController();\n\n  useEffect(() => {\n    const updateStatus = () => setStatus(client.providerStatus);\n    client.addHandler(ProviderEvents.ConfigurationChanged, updateStatus, { signal: controller.signal });\n    client.addHandler(ProviderEvents.ContextChanged, updateStatus, { signal: controller.signal });\n    client.addHandler(ProviderEvents.Error, updateStatus, { signal: controller.signal });\n    client.addHandler(ProviderEvents.Ready, updateStatus, { signal: controller.signal });\n    client.addHandler(ProviderEvents.Stale, updateStatus, { signal: controller.signal });\n    client.addHandler(ProviderEvents.Reconciling, updateStatus, { signal: controller.signal });\n    return () => {\n      controller.abort();\n    };\n  }, [client]);\n\n  return status;\n}\n", "import React from 'react';\nimport { Context } from '../internal';\nimport { OpenFeature } from '@openfeature/web-sdk';\nimport type { Provider } from '@openfeature/web-sdk';\nimport { MissingContextError } from '../internal/errors';\n\n/**\n * Get the {@link Provider} bound to the domain specified in the OpenFeatureProvider context.\n * Note that it isn't recommended to interact with the provider directly, but rather through\n * an OpenFeature client.\n * @returns {Provider} provider for this scope\n */\nexport function useOpenFeatureProvider(): Provider {\n  const openFeatureContext = React.useContext(Context);\n\n  if (!openFeatureContext) {\n    throw new MissingContextError('No OpenFeature context available');\n  }\n\n  return OpenFeature.getProvider(openFeatureContext.domain);\n}\n", "import type {\n  EvaluationDetails,\n  FlagValue} from '@openfeature/web-sdk';\nimport {\n  StandardResolutionReasons\n} from '@openfeature/web-sdk';\nimport type { FlagQuery } from '../query';\n\n\n// FlagQuery implementation, do not export\nexport class HookFlagQuery<T extends FlagValue = FlagValue> implements FlagQuery {\n  constructor(private _details: EvaluationDetails<T>) {}\n\n  get details() {\n    return this._details;\n  }\n\n  get value() {\n    return this._details?.value;\n  }\n\n  get variant() {\n    return this._details.variant;\n  }\n\n  get flagMetadata() {\n    return this._details.flagMetadata;\n  }\n\n  get reason() {\n    return this._details.reason;\n  }\n\n  get isError() {\n    return !!this._details?.errorCode || this._details.reason == StandardResolutionReasons.ERROR;\n  }\n\n  get errorCode() {\n    return this._details?.errorCode;\n  }\n\n  get errorMessage() {\n    return this._details?.errorMessage;\n  }\n\n  get isAuthoritative() {\n    return (\n      !this.isError &&\n      this._details.reason != StandardResolutionReasons.STALE &&\n      this._details.reason != StandardResolutionReasons.DISABLED\n    );\n  }\n\n  get type() {\n    return typeof this._details.value;\n  }\n}\n", "import type { Client} from '@openfeature/web-sdk';\nimport { OpenFeature } from '@openfeature/web-sdk';\nimport * as React from 'react';\nimport type { ReactFlagEvaluationOptions } from '../options';\nimport { Context } from '../internal';\n\ntype ClientOrDomain =\n  | {\n      /**\n       * An identifier which logically binds clients with providers\n       * @see OpenFeature.setProvider() and overloads.\n       */\n      domain?: string;\n      client?: never;\n    }\n  | {\n      /**\n       * OpenFeature client to use.\n       */\n      client?: Client;\n      domain?: never;\n    };\n\ntype ProviderProps = {\n  children?: React.ReactNode;\n} & ClientOrDomain &\n  ReactFlagEvaluationOptions;\n\n  /**\n   * Provides a scope for evaluating feature flags by binding a client to all child components.\n   * @param {ProviderProps} properties props for the context provider\n   * @returns {OpenFeatureProvider} context provider\n   */\nexport function OpenFeatureProvider({ client, domain, children, ...options }: ProviderProps): JSX.Element {\n  if (!client) {\n    client = OpenFeature.getClient(domain);\n  }\n\n  return <Context.Provider value={{ client, options, domain }}>{children}</Context.Provider>;\n}\n", "import { ProviderStatus } from '@openfeature/web-sdk';\nimport { useOpenFeatureClient } from './use-open-feature-client';\nimport { useOpenFeatureClientStatus } from './use-open-feature-client-status';\nimport type { ReactFlagEvaluationOptions } from '../options';\nimport { DEFAULT_OPTIONS, useProviderOptions, normalizeOptions, suspendUntilInitialized } from '../internal';\nimport { useOpenFeatureProvider } from './use-open-feature-provider';\n\ntype Options = Pick<ReactFlagEvaluationOptions, 'suspendUntilReady'>;\n\n/**\n * Utility hook that triggers suspense until the provider is {@link ProviderStatus.READY}, without evaluating any flags.\n * Especially useful for React v16/17 \"Legacy Suspense\", in which siblings to suspending components are\n * initially mounted and then hidden (see: https://github.com/reactwg/react-18/discussions/7).\n * @param {Options} options options for suspense\n * @returns {boolean} boolean indicating if provider is {@link ProviderStatus.READY}, useful if suspense is disabled and you want to handle loaders on your own\n */\nexport function useWhenProviderReady(options?: Options): boolean {\n  // highest priority > evaluation hook options > provider options > default options > lowest priority\n  const defaultedOptions = { ...DEFAULT_OPTIONS, ...useProviderOptions(), ...normalizeOptions(options) };\n  const client = useOpenFeatureClient();\n  const status = useOpenFeatureClientStatus();\n  const provider = useOpenFeatureProvider();\n\n  if (defaultedOptions.suspendUntilReady && status === ProviderStatus.NOT_READY) {\n    suspendUntilInitialized(provider, client);\n  }\n\n  return status === ProviderStatus.READY;\n}\n", "import type {\n  JsonValue,\n  Provider} from '@openfeature/web-sdk';\nimport {\n  InMemoryProvider,\n  NOOP_PROVIDER,\n  OpenFeature\n} from '@openfeature/web-sdk';\nimport React from 'react';\nimport type { NormalizedOptions } from '../options';\nimport { OpenFeatureProvider } from './provider';\n\ntype FlagValueMap = { [flagKey: string]: JsonValue };\ntype FlagConfig = ConstructorParameters<typeof InMemoryProvider>[0];\ntype TestProviderProps = Omit<React.ComponentProps<typeof OpenFeatureProvider>, 'client'> &\n  (\n    | {\n        provider?: never;\n        /**\n         * Optional map of flagKeys to flagValues for this OpenFeatureTestProvider context.\n         * If not supplied, all flag evaluations will default.\n         */\n        flagValueMap?: FlagValueMap;\n        /**\n         * Optional delay for the underlying test provider's readiness and reconciliation.\n         * Defaults to 0.\n         */\n        delayMs?: number;\n      }\n    | {\n        /**\n         * An optional partial provider to pass for full control over the flag resolution for this OpenFeatureTestProvider context.\n         * Any un-implemented methods or properties will no-op.\n         */\n        provider?: Partial<Provider>;\n        flagValueMap?: never;\n        delayMs?: never;\n      }\n  );\n\n  const TEST_VARIANT = 'test-variant';\n  const TEST_PROVIDER = 'test-provider';\n\n// internal provider which is basically the in-memory provider with a simpler config and some optional fake delays\nclass TestProvider extends InMemoryProvider {\n\n  // initially make this undefined, we still set it if a delay is specified\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore - For maximum compatibility with previous versions, we ignore a possible TS error here,\n  // since \"initialize\" was previously defined in superclass.\n  // We can safely remove this ts-ignore in a few versions\n  initialize: Provider['initialize'] = undefined;\n\n  // \"place-holder\" init function which we only assign if want a delay\n  private delayedInitialize = async () => {\n    await new Promise<void>((resolve) => setTimeout(resolve, this.delay));\n  };\n\n  constructor(\n    flagValueMap: FlagValueMap,\n    private delay = 0,\n  ) {\n    // convert the simple flagValueMap into an in-memory config\n    const flagConfig = Object.entries(flagValueMap).reduce((acc: FlagConfig, flag): FlagConfig => {\n      return {\n        ...acc,\n        [flag[0]]: {\n          variants: {\n            [TEST_VARIANT]: flag[1],\n          },\n          defaultVariant: TEST_VARIANT,\n          disabled: false,\n        },\n      };\n    }, {});\n    super(flagConfig);\n    // only define and init if there's a non-zero delay specified\n    this.initialize = this.delay ? this.delayedInitialize.bind(this) : undefined;\n  }\n\n  async onContextChange() {\n    return new Promise<void>((resolve) => setTimeout(resolve, this.delay));\n  }\n}\n\n/**\n * A React Context provider based on the {@link InMemoryProvider}, specifically built for testing.\n * Use this for testing components that use flag evaluation hooks.\n * @param {TestProviderProps} testProviderOptions options for the OpenFeatureTestProvider\n * @returns {OpenFeatureProvider} OpenFeatureTestProvider\n */\nexport function OpenFeatureTestProvider(testProviderOptions: TestProviderProps) {\n  const { flagValueMap, provider } = testProviderOptions;\n  const effectiveProvider = (\n    flagValueMap ? new TestProvider(flagValueMap, testProviderOptions.delayMs) : mixInNoop(provider) || NOOP_PROVIDER\n  ) as Provider;\n  testProviderOptions.domain\n    ? OpenFeature.setProvider(testProviderOptions.domain, effectiveProvider)\n    : OpenFeature.setProvider(effectiveProvider);\n\n  return (\n    <OpenFeatureProvider {...(testProviderOptions as NormalizedOptions)} domain={testProviderOptions.domain}>\n      {testProviderOptions.children}\n    </OpenFeatureProvider>\n  );\n}\n\n// mix in the no-op provider when the partial is passed\nfunction mixInNoop(provider: Partial<Provider> = {}) {\n  // fill in any missing methods with no-ops\n  for (const prop of Object.getOwnPropertyNames(Object.getPrototypeOf(NOOP_PROVIDER)).filter(prop => prop !== 'constructor')) {\n    const patchedProvider = provider as {[key: string]: keyof Provider};\n    if (!Object.getPrototypeOf(patchedProvider)[prop] && !patchedProvider[prop]) {\n      patchedProvider[prop] = Object.getPrototypeOf(NOOP_PROVIDER)[prop];\n    }\n  }\n  // fill in the metadata if missing\n  if (!provider.metadata || !provider.metadata.name) {\n    (provider.metadata as unknown) = { name: TEST_PROVIDER };\n  }\n  return provider;\n}\n", "import { useCallback, useContext, useRef } from 'react';\nimport type { EvaluationContext } from '@openfeature/web-sdk';\nimport { OpenFeature } from '@openfeature/web-sdk';\nimport { Context } from '../internal';\n\nexport type ContextMutationOptions = {\n  /**\n   * Mutate the default context instead of the domain scoped context applied at the `<OpenFeatureProvider/>`.\n   * Note, if the `<OpenFeatureProvider/>` has no domain specified, the default is used.\n   * See the {@link https://openfeature.dev/docs/reference/technologies/client/web/#manage-evaluation-context-for-domains|documentation} for more information.\n   * @default false\n   */\n  defaultContext?: boolean;\n};\n\nexport type ContextMutation = {\n  /**\n   * Context-aware function to set the desired context (see: {@link ContextMutationOptions} for details).\n   * There's generally no need to await the result of this function; flag evaluation hooks will re-render when the context is updated.\n   * This promise never rejects.\n   * @param updatedContext\n   * @returns Promise for awaiting the context update\n   */\n  setContext: (updatedContext: EvaluationContext) => Promise<void>;\n};\n\n/**\n * Get context-aware tracking function(s) for mutating the evaluation context associated with this domain, or the default context if `defaultContext: true`.\n * See the {@link https://openfeature.dev/docs/reference/technologies/client/web/#targeting-and-context|documentation} for more information.\n * @param {ContextMutationOptions} options options for the generated function\n * @returns {ContextMutation} context-aware function(s) to mutate evaluation context\n */\nexport function useContextMutator(options: ContextMutationOptions = { defaultContext: false }): ContextMutation {\n    const { domain } = useContext(Context) || {};\n    const previousContext = useRef<null | EvaluationContext>(null);\n\n    const setContext = useCallback(async (updatedContext: EvaluationContext) => {\n        if (previousContext.current !== updatedContext) {\n            if (!domain || options?.defaultContext) {\n                OpenFeature.setContext(updatedContext);\n            } else {\n                OpenFeature.setContext(domain, updatedContext);\n            }\n            previousContext.current = updatedContext;\n        }\n    }, [domain]);\n\n    return {\n        setContext,\n    };\n}\n", "import type { Tracking, TrackingEventDetails } from '@openfeature/web-sdk';\nimport { useCallback } from 'react';\nimport { useOpenFeatureClient } from '../provider';\n\nexport type Track = {\n  /**\n   * Context-aware tracking function for the parent `<OpenFeatureProvider/>`.\n   * Track a user action or application state, usually representing a business objective or outcome.\n   * @param trackingEventName an identifier for the event\n   * @param trackingEventDetails the details of the tracking event\n   */\n  track: Tracking['track'];\n};\n\n/**\n * Get a context-aware tracking function.\n * @returns {Track} context-aware tracking\n */\nexport function useTrack(): Track {\n  const client = useOpenFeatureClient();\n\n  const track = useCallback((trackingEventName: string, trackingEventDetails?: TrackingEventDetails) => {\n    client.track(trackingEventName, trackingEventDetails);\n  }, []);\n\n  return {\n    track,\n  };\n}\n"],
  "mappings": "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",
  "names": ["import_web_sdk", "import_react", "React", "import_react", "React", "import_react", "React", "import_react", "import_web_sdk", "import_react", "import_web_sdk", "React", "import_web_sdk", "import_web_sdk", "React", "import_web_sdk", "import_web_sdk", "import_react", "React", "prop", "import_react", "import_web_sdk", "import_react"]
}
