import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * SyncState conveys the state of the payload. These states are related to flagd isync.go type definitions but
 * contains extras to optimize grpc use case. Refer - https://github.com/open-feature/flagd/blob/main/pkg/sync/isync.go
 *
 * @generated from enum sync.v1.SyncState
 * @deprecated
 */
export declare enum SyncState {
    /**
     * Value is ignored by the listening flagd
     *
     * @generated from enum value: SYNC_STATE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * All the flags matching the request. This is the default response and other states can be ignored
     * by the implementation. Flagd internally replaces all existing flags for this response state.
     *
     * @generated from enum value: SYNC_STATE_ALL = 1;
     */
    ALL = 1,
    /**
     * Convey an addition of a flag. Flagd internally handles this by combining new flags with existing ones
     *
     * @generated from enum value: SYNC_STATE_ADD = 2;
     */
    ADD = 2,
    /**
     * Convey an update of a flag. Flagd internally attempts to update if the updated flag already exist OR if it does not,
     * it will get added
     *
     * @generated from enum value: SYNC_STATE_UPDATE = 3;
     */
    UPDATE = 3,
    /**
     * Convey a deletion of a flag. Flagd internally removes the flag
     *
     * @generated from enum value: SYNC_STATE_DELETE = 4;
     */
    DELETE = 4,
    /**
     * Optional server ping to check client connectivity. Handling is ignored by flagd and is to merely support live check
     *
     * @generated from enum value: SYNC_STATE_PING = 5;
     */
    PING = 5
}
/**
 * SyncFlagsRequest is the request initiating the sever-streaming rpc. Flagd sends this request, acting as the client
 *
 * @generated from message sync.v1.SyncFlagsRequest
 * @deprecated
 */
export declare class SyncFlagsRequest extends Message<SyncFlagsRequest> {
    /**
     * Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
     * utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
     * flag configurations that it can expose to this request. This field is intended to be optional. However server
     * implementations may enforce it.
     *    ex:- provider_id: flagd-weatherapp-sidecar
     *
     * @generated from field: string provider_id = 1;
     */
    providerId: string;
    /**
     * Optional: A selector for the flag configuration request. The server implementation may utilize this to select
     * flag configurations from a collection, select the source of the flag or combine this to any desired underlying
     * filtering mechanism.
     *    ex:- selector: 'source=database,app=weatherapp'
     *
     * @generated from field: string selector = 2;
     */
    selector: string;
    constructor(data?: PartialMessage<SyncFlagsRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "sync.v1.SyncFlagsRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncFlagsRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncFlagsRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncFlagsRequest;
    static equals(a: SyncFlagsRequest | PlainMessage<SyncFlagsRequest> | undefined, b: SyncFlagsRequest | PlainMessage<SyncFlagsRequest> | undefined): boolean;
}
/**
 * SyncFlagsResponse is the server response containing feature flag configurations and the state
 *
 * @generated from message sync.v1.SyncFlagsResponse
 * @deprecated
 */
export declare class SyncFlagsResponse extends Message<SyncFlagsResponse> {
    /**
     * flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
     *
     * @generated from field: string flag_configuration = 1;
     */
    flagConfiguration: string;
    /**
     * State conveying the operation to be performed by flagd. See the descriptions of SyncState for an explanation of
     * supported values
     *
     * @generated from field: sync.v1.SyncState state = 2;
     */
    state: SyncState;
    constructor(data?: PartialMessage<SyncFlagsResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "sync.v1.SyncFlagsResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncFlagsResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncFlagsResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncFlagsResponse;
    static equals(a: SyncFlagsResponse | PlainMessage<SyncFlagsResponse> | undefined, b: SyncFlagsResponse | PlainMessage<SyncFlagsResponse> | undefined): boolean;
}
/**
 * FetchAllFlagsRequest is the request to fetch all flags. Flagd sends this request as the client in order to resync its internal state
 *
 * @generated from message sync.v1.FetchAllFlagsRequest
 * @deprecated
 */
export declare class FetchAllFlagsRequest extends Message<FetchAllFlagsRequest> {
    /**
     * Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
     * utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
     * flag configurations that it can expose to this request. This field is intended to be optional. However server
     * implementations may enforce it.
     *    ex:- provider_id: flagd-weatherapp-sidecar
     *
     * @generated from field: string provider_id = 1;
     */
    providerId: string;
    /**
     * Optional: A selector for the flag configuration request. The server implementation may utilize this to select
     * flag configurations from a collection, select the source of the flag or combine this to any desired underlying
     * filtering mechanism.
     *    ex:- selector: 'source=database,app=weatherapp'
     *
     * @generated from field: string selector = 2;
     */
    selector: string;
    constructor(data?: PartialMessage<FetchAllFlagsRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "sync.v1.FetchAllFlagsRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchAllFlagsRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchAllFlagsRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchAllFlagsRequest;
    static equals(a: FetchAllFlagsRequest | PlainMessage<FetchAllFlagsRequest> | undefined, b: FetchAllFlagsRequest | PlainMessage<FetchAllFlagsRequest> | undefined): boolean;
}
/**
 *  FetchAllFlagsResponse is the server response containing feature flag configurations
 *
 * @generated from message sync.v1.FetchAllFlagsResponse
 * @deprecated
 */
export declare class FetchAllFlagsResponse extends Message<FetchAllFlagsResponse> {
    /**
     * flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
     *
     * @generated from field: string flag_configuration = 1;
     */
    flagConfiguration: string;
    constructor(data?: PartialMessage<FetchAllFlagsResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "sync.v1.FetchAllFlagsResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchAllFlagsResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchAllFlagsResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchAllFlagsResponse;
    static equals(a: FetchAllFlagsResponse | PlainMessage<FetchAllFlagsResponse> | undefined, b: FetchAllFlagsResponse | PlainMessage<FetchAllFlagsResponse> | undefined): boolean;
}
