import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
/**
 * SyncFlagsRequest is the request initiating the server-streaming rpc.
 * Implementations of Flagd providers and Flagd itself send this request, acting as the client.
 *
 * @generated from message flagd.sync.v1.SyncFlagsRequest
 */
export declare class SyncFlagsRequest extends Message<SyncFlagsRequest> {
    /**
     * Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
     * utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
     * flag configurations that it can expose to this request. This field is intended to be optional. However server
     * implementations may enforce it.
     *    ex:- provider_id: flagd-weatherapp-sidecar
     *
     * @generated from field: string provider_id = 1;
     */
    providerId: string;
    /**
     * Optional: A selector for the flag configuration request. The server implementation may utilize this to select
     * flag configurations from a collection, select the source of the flag or combine this to any desired underlying
     * filtering mechanism.
     *    ex:- selector: 'source=database,app=weatherapp'
     *
     * @generated from field: string selector = 2;
     */
    selector: string;
    constructor(data?: PartialMessage<SyncFlagsRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "flagd.sync.v1.SyncFlagsRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncFlagsRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncFlagsRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncFlagsRequest;
    static equals(a: SyncFlagsRequest | PlainMessage<SyncFlagsRequest> | undefined, b: SyncFlagsRequest | PlainMessage<SyncFlagsRequest> | undefined): boolean;
}
/**
 * SyncFlagsResponse is the server response containing feature flag configurations and the state
 *
 * @generated from message flagd.sync.v1.SyncFlagsResponse
 */
export declare class SyncFlagsResponse extends Message<SyncFlagsResponse> {
    /**
     * flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
     *
     * @generated from field: string flag_configuration = 1;
     */
    flagConfiguration: string;
    constructor(data?: PartialMessage<SyncFlagsResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "flagd.sync.v1.SyncFlagsResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncFlagsResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncFlagsResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncFlagsResponse;
    static equals(a: SyncFlagsResponse | PlainMessage<SyncFlagsResponse> | undefined, b: SyncFlagsResponse | PlainMessage<SyncFlagsResponse> | undefined): boolean;
}
/**
 * FetchAllFlagsRequest is the request to fetch all flags. Clients send this request as the client in order to resync their internal state
 *
 * @generated from message flagd.sync.v1.FetchAllFlagsRequest
 */
export declare class FetchAllFlagsRequest extends Message<FetchAllFlagsRequest> {
    /**
     * Optional: A unique identifier for clients initiating the request. The server implementations may
     * utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
     * flag configurations that it can expose to this request. This field is intended to be optional. However server
     * implementations may enforce it.
     *    ex:- provider_id: flagd-weatherapp-sidecar
     *
     * @generated from field: string provider_id = 1;
     */
    providerId: string;
    /**
     * Optional: A selector for the flag configuration request. The server implementation may utilize this to select
     * flag configurations from a collection, select the source of the flag or combine this to any desired underlying
     * filtering mechanism.
     *    ex:- selector: 'source=database,app=weatherapp'
     *
     * @generated from field: string selector = 2;
     */
    selector: string;
    constructor(data?: PartialMessage<FetchAllFlagsRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "flagd.sync.v1.FetchAllFlagsRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchAllFlagsRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchAllFlagsRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchAllFlagsRequest;
    static equals(a: FetchAllFlagsRequest | PlainMessage<FetchAllFlagsRequest> | undefined, b: FetchAllFlagsRequest | PlainMessage<FetchAllFlagsRequest> | undefined): boolean;
}
/**
 * FetchAllFlagsResponse is the server response containing feature flag configurations
 *
 * @generated from message flagd.sync.v1.FetchAllFlagsResponse
 */
export declare class FetchAllFlagsResponse extends Message<FetchAllFlagsResponse> {
    /**
     * flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json
     *
     * @generated from field: string flag_configuration = 1;
     */
    flagConfiguration: string;
    constructor(data?: PartialMessage<FetchAllFlagsResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "flagd.sync.v1.FetchAllFlagsResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchAllFlagsResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchAllFlagsResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchAllFlagsResponse;
    static equals(a: FetchAllFlagsResponse | PlainMessage<FetchAllFlagsResponse> | undefined, b: FetchAllFlagsResponse | PlainMessage<FetchAllFlagsResponse> | undefined): boolean;
}
/**
 * GetMetadataRequest is the request for retrieving metadata from the sync service
 *
 * @generated from message flagd.sync.v1.GetMetadataRequest
 */
export declare class GetMetadataRequest extends Message<GetMetadataRequest> {
    constructor(data?: PartialMessage<GetMetadataRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "flagd.sync.v1.GetMetadataRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetadataRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetadataRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetadataRequest;
    static equals(a: GetMetadataRequest | PlainMessage<GetMetadataRequest> | undefined, b: GetMetadataRequest | PlainMessage<GetMetadataRequest> | undefined): boolean;
}
/**
 * GetMetadataResponse contains metadata from the sync service
 *
 * @generated from message flagd.sync.v1.GetMetadataResponse
 */
export declare class GetMetadataResponse extends Message<GetMetadataResponse> {
    /**
     * @generated from field: google.protobuf.Struct metadata = 2;
     */
    metadata?: Struct;
    constructor(data?: PartialMessage<GetMetadataResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "flagd.sync.v1.GetMetadataResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetadataResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetadataResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetadataResponse;
    static equals(a: GetMetadataResponse | PlainMessage<GetMetadataResponse> | undefined, b: GetMetadataResponse | PlainMessage<GetMetadataResponse> | undefined): boolean;
}
