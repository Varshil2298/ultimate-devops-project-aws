import { CallbackClient, PromiseClient } from '@connectrpc/connect';
import { EvaluationContext, JsonValue, Logger, OpenFeatureEventEmitter, Provider, ResolutionDetails } from '@openfeature/web-sdk';
import { Service } from '../proto/ts/flagd/evaluation/v1/evaluation_connect';
import { FlagdProviderOptions } from './options';
export declare const ERROR_DISABLED = "DISABLED";
export declare class FlagdWebProvider implements Provider {
    metadata: {
        name: string;
    };
    readonly runsOn = "client";
    readonly events: OpenFeatureEventEmitter;
    private _connected;
    private _promiseClient;
    private _callbackClient;
    private _maxRetries;
    private _maxDelay;
    private _retry;
    private _delayMs;
    private _logger?;
    private _flags;
    private _cancelFunction;
    constructor(options: FlagdProviderOptions, logger?: Logger, promiseClient?: PromiseClient<typeof Service>, callbackClient?: CallbackClient<typeof Service>);
    onContextChange(oldContext: EvaluationContext, newContext: EvaluationContext): Promise<void>;
    initialize(): Promise<void>;
    resolveBooleanEvaluation(flagKey: string): ResolutionDetails<boolean>;
    resolveStringEvaluation(flagKey: string): ResolutionDetails<string>;
    resolveNumberEvaluation(flagKey: string): ResolutionDetails<number>;
    resolveObjectEvaluation<U extends JsonValue>(flagKey: string): ResolutionDetails<U>;
    onClose(): Promise<void>;
    private evaluate;
    private retryConnect;
    private fetchAll;
    private resetConnectionState;
    private transformContext;
}
